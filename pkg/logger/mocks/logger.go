// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/logger/logger.go

// Package mock_logger is a generated GoMock package.
package mock_logger

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// DPanic mocks base method.
func (m *MockLogger) DPanic(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DPanic", varargs...)
}

// DPanic indicates an expected call of DPanic.
func (mr *MockLoggerMockRecorder) DPanic(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DPanic", reflect.TypeOf((*MockLogger)(nil).DPanic), args...)
}

// DPanicf mocks base method.
func (m *MockLogger) DPanicf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DPanicf", varargs...)
}

// DPanicf indicates an expected call of DPanicf.
func (mr *MockLoggerMockRecorder) DPanicf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DPanicf", reflect.TypeOf((*MockLogger)(nil).DPanicf), varargs...)
}

// Debug mocks base method.
func (m *MockLogger) Debug(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), args...)
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Err mocks base method.
func (m *MockLogger) Err(msg string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Err", msg, err)
}

// Err indicates an expected call of Err.
func (mr *MockLoggerMockRecorder) Err(msg, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockLogger)(nil).Err), msg, err)
}

// Error mocks base method.
func (m *MockLogger) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), args...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), args...)
}

// Fatalf mocks base method.
func (m *MockLogger) Fatalf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockLoggerMockRecorder) Fatalf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockLogger)(nil).Fatalf), varargs...)
}

// GrpcClientInterceptorLogger mocks base method.
func (m *MockLogger) GrpcClientInterceptorLogger(method string, req, reply interface{}, time time.Duration, metaData map[string][]string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrpcClientInterceptorLogger", method, req, reply, time, metaData, err)
}

// GrpcClientInterceptorLogger indicates an expected call of GrpcClientInterceptorLogger.
func (mr *MockLoggerMockRecorder) GrpcClientInterceptorLogger(method, req, reply, time, metaData, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcClientInterceptorLogger", reflect.TypeOf((*MockLogger)(nil).GrpcClientInterceptorLogger), method, req, reply, time, metaData, err)
}

// GrpcClientInterceptorLoggerErr mocks base method.
func (m *MockLogger) GrpcClientInterceptorLoggerErr(method string, req, reply interface{}, time time.Duration, metaData map[string][]string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrpcClientInterceptorLoggerErr", method, req, reply, time, metaData, err)
}

// GrpcClientInterceptorLoggerErr indicates an expected call of GrpcClientInterceptorLoggerErr.
func (mr *MockLoggerMockRecorder) GrpcClientInterceptorLoggerErr(method, req, reply, time, metaData, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcClientInterceptorLoggerErr", reflect.TypeOf((*MockLogger)(nil).GrpcClientInterceptorLoggerErr), method, req, reply, time, metaData, err)
}

// GrpcMiddlewareAccessLogger mocks base method.
func (m *MockLogger) GrpcMiddlewareAccessLogger(method string, time time.Duration, metaData map[string][]string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrpcMiddlewareAccessLogger", method, time, metaData, err)
}

// GrpcMiddlewareAccessLogger indicates an expected call of GrpcMiddlewareAccessLogger.
func (mr *MockLoggerMockRecorder) GrpcMiddlewareAccessLogger(method, time, metaData, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcMiddlewareAccessLogger", reflect.TypeOf((*MockLogger)(nil).GrpcMiddlewareAccessLogger), method, time, metaData, err)
}

// GrpcMiddlewareAccessLoggerErr mocks base method.
func (m *MockLogger) GrpcMiddlewareAccessLoggerErr(method string, time time.Duration, metaData map[string][]string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrpcMiddlewareAccessLoggerErr", method, time, metaData, err)
}

// GrpcMiddlewareAccessLoggerErr indicates an expected call of GrpcMiddlewareAccessLoggerErr.
func (mr *MockLoggerMockRecorder) GrpcMiddlewareAccessLoggerErr(method, time, metaData, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcMiddlewareAccessLoggerErr", reflect.TypeOf((*MockLogger)(nil).GrpcMiddlewareAccessLoggerErr), method, time, metaData, err)
}

// HttpMiddlewareAccessLogger mocks base method.
func (m *MockLogger) HttpMiddlewareAccessLogger(method, uri string, status int, size int64, time time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HttpMiddlewareAccessLogger", method, uri, status, size, time)
}

// HttpMiddlewareAccessLogger indicates an expected call of HttpMiddlewareAccessLogger.
func (mr *MockLoggerMockRecorder) HttpMiddlewareAccessLogger(method, uri, status, size, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpMiddlewareAccessLogger", reflect.TypeOf((*MockLogger)(nil).HttpMiddlewareAccessLogger), method, uri, status, size, time)
}

// Info mocks base method.
func (m *MockLogger) Info(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), args...)
}

// Infof mocks base method.
func (m *MockLogger) Infof(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// InitLogger mocks base method.
func (m *MockLogger) InitLogger() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitLogger")
}

// InitLogger indicates an expected call of InitLogger.
func (mr *MockLoggerMockRecorder) InitLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitLogger", reflect.TypeOf((*MockLogger)(nil).InitLogger))
}

// Named mocks base method.
func (m *MockLogger) Named(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Named", name)
}

// Named indicates an expected call of Named.
func (mr *MockLoggerMockRecorder) Named(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Named", reflect.TypeOf((*MockLogger)(nil).Named), name)
}

// Printf mocks base method.
func (m *MockLogger) Printf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockLoggerMockRecorder) Printf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockLogger)(nil).Printf), varargs...)
}

// SetLogLevel mocks base method.
func (m *MockLogger) SetLogLevel(logLevel string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogLevel", logLevel)
}

// SetLogLevel indicates an expected call of SetLogLevel.
func (mr *MockLoggerMockRecorder) SetLogLevel(logLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogLevel", reflect.TypeOf((*MockLogger)(nil).SetLogLevel), logLevel)
}

// Sync mocks base method.
func (m *MockLogger) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockLoggerMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockLogger)(nil).Sync))
}

// Warn mocks base method.
func (m *MockLogger) Warn(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), args...)
}

// WarnErrMsg mocks base method.
func (m *MockLogger) WarnErrMsg(msg string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WarnErrMsg", msg, err)
}

// WarnErrMsg indicates an expected call of WarnErrMsg.
func (mr *MockLoggerMockRecorder) WarnErrMsg(msg, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnErrMsg", reflect.TypeOf((*MockLogger)(nil).WarnErrMsg), msg, err)
}

// Warnf mocks base method.
func (m *MockLogger) Warnf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLoggerMockRecorder) Warnf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
}
