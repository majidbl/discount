// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/report/repository.go.go

// Package mock_report is a generated GoMock package.
package mock_report

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v4 "github.com/jackc/pgx/v4"
	models "github.com/majidbl/discount/internal/models"
)

// MockPGRepository is a mock of PGRepository interface.
type MockPGRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPGRepositoryMockRecorder
}

// MockPGRepositoryMockRecorder is the mock recorder for MockPGRepository.
type MockPGRepositoryMockRecorder struct {
	mock *MockPGRepository
}

// NewMockPGRepository creates a new mock instance.
func NewMockPGRepository(ctrl *gomock.Controller) *MockPGRepository {
	mock := &MockPGRepository{ctrl: ctrl}
	mock.recorder = &MockPGRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPGRepository) EXPECT() *MockPGRepositoryMockRecorder {
	return m.recorder
}

// CheckGiftUsage mocks base method.
func (m *MockPGRepository) CheckGiftUsage(ctx context.Context, usage *models.CheckGiftUsage) (*models.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGiftUsage", ctx, usage)
	ret0, _ := ret[0].(*models.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckGiftUsage indicates an expected call of CheckGiftUsage.
func (mr *MockPGRepositoryMockRecorder) CheckGiftUsage(ctx, usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGiftUsage", reflect.TypeOf((*MockPGRepository)(nil).CheckGiftUsage), ctx, usage)
}

// CheckGiftUsageX mocks base method.
func (m *MockPGRepository) CheckGiftUsageX(ctx context.Context, usage *models.CheckGiftUsage, tx v4.Tx) (*models.Report, v4.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGiftUsageX", ctx, usage, tx)
	ret0, _ := ret[0].(*models.Report)
	ret1, _ := ret[1].(v4.Tx)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckGiftUsageX indicates an expected call of CheckGiftUsageX.
func (mr *MockPGRepositoryMockRecorder) CheckGiftUsageX(ctx, usage, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGiftUsageX", reflect.TypeOf((*MockPGRepository)(nil).CheckGiftUsageX), ctx, usage, tx)
}

// Commit mocks base method.
func (m *MockPGRepository) Commit(ctx context.Context, tx v4.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockPGRepositoryMockRecorder) Commit(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockPGRepository)(nil).Commit), ctx, tx)
}

// Create mocks base method.
func (m *MockPGRepository) Create(ctx context.Context, createReq *models.CreateReportReq) (*models.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, createReq)
	ret0, _ := ret[0].(*models.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPGRepositoryMockRecorder) Create(ctx, createReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPGRepository)(nil).Create), ctx, createReq)
}

// CreateX mocks base method.
func (m *MockPGRepository) CreateX(ctx context.Context, createReq *models.CreateReportReq, tx v4.Tx) (*models.Report, v4.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateX", ctx, createReq, tx)
	ret0, _ := ret[0].(*models.Report)
	ret1, _ := ret[1].(v4.Tx)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateX indicates an expected call of CreateX.
func (mr *MockPGRepositoryMockRecorder) CreateX(ctx, createReq, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateX", reflect.TypeOf((*MockPGRepository)(nil).CreateX), ctx, createReq, tx)
}

// GetByGiftCode mocks base method.
func (m *MockPGRepository) GetByGiftCode(ctx context.Context, giftCode string) ([]*models.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGiftCode", ctx, giftCode)
	ret0, _ := ret[0].([]*models.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGiftCode indicates an expected call of GetByGiftCode.
func (mr *MockPGRepositoryMockRecorder) GetByGiftCode(ctx, giftCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGiftCode", reflect.TypeOf((*MockPGRepository)(nil).GetByGiftCode), ctx, giftCode)
}

// GetCountByGiftCode mocks base method.
func (m *MockPGRepository) GetCountByGiftCode(ctx context.Context, mobile string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountByGiftCode", ctx, mobile)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountByGiftCode indicates an expected call of GetCountByGiftCode.
func (mr *MockPGRepositoryMockRecorder) GetCountByGiftCode(ctx, mobile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountByGiftCode", reflect.TypeOf((*MockPGRepository)(nil).GetCountByGiftCode), ctx, mobile)
}

// GetCountByGiftCodeX mocks base method.
func (m *MockPGRepository) GetCountByGiftCodeX(ctx context.Context, mobile string, tx v4.Tx) (int64, v4.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountByGiftCodeX", ctx, mobile, tx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(v4.Tx)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCountByGiftCodeX indicates an expected call of GetCountByGiftCodeX.
func (mr *MockPGRepositoryMockRecorder) GetCountByGiftCodeX(ctx, mobile, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountByGiftCodeX", reflect.TypeOf((*MockPGRepository)(nil).GetCountByGiftCodeX), ctx, mobile, tx)
}

// RollBack mocks base method.
func (m *MockPGRepository) RollBack(ctx context.Context, tx v4.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollBack", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollBack indicates an expected call of RollBack.
func (mr *MockPGRepositoryMockRecorder) RollBack(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollBack", reflect.TypeOf((*MockPGRepository)(nil).RollBack), ctx, tx)
}

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// GetCountUsage mocks base method.
func (m *MockRedisRepository) GetCountUsage(ctx context.Context, giftCode string) (*models.CountUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountUsage", ctx, giftCode)
	ret0, _ := ret[0].(*models.CountUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountUsage indicates an expected call of GetCountUsage.
func (mr *MockRedisRepositoryMockRecorder) GetCountUsage(ctx, giftCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountUsage", reflect.TypeOf((*MockRedisRepository)(nil).GetCountUsage), ctx, giftCode)
}

// GetReport mocks base method.
func (m *MockRedisRepository) GetReport(ctx context.Context, giftCode string) ([]*models.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", ctx, giftCode)
	ret0, _ := ret[0].([]*models.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport.
func (mr *MockRedisRepositoryMockRecorder) GetReport(ctx, giftCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockRedisRepository)(nil).GetReport), ctx, giftCode)
}

// SetCountUsage mocks base method.
func (m *MockRedisRepository) SetCountUsage(ctx context.Context, usage *models.CountUsage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCountUsage", ctx, usage)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCountUsage indicates an expected call of SetCountUsage.
func (mr *MockRedisRepositoryMockRecorder) SetCountUsage(ctx, usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCountUsage", reflect.TypeOf((*MockRedisRepository)(nil).SetCountUsage), ctx, usage)
}

// SetReport mocks base method.
func (m *MockRedisRepository) SetReport(ctx context.Context, wallet []*models.Report, giftCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReport", ctx, wallet, giftCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReport indicates an expected call of SetReport.
func (mr *MockRedisRepositoryMockRecorder) SetReport(ctx, wallet, giftCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReport", reflect.TypeOf((*MockRedisRepository)(nil).SetReport), ctx, wallet, giftCode)
}
