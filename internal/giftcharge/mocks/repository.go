// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/giftcharge/repository.go

// Package mock_giftcharge is a generated GoMock package.
package mock_giftcharge

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v4 "github.com/jackc/pgx/v4"
	models "github.com/majidbl/discount/internal/models"
)

// MockPGRepository is a mock of PGRepository interface.
type MockPGRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPGRepositoryMockRecorder
}

// MockPGRepositoryMockRecorder is the mock recorder for MockPGRepository.
type MockPGRepositoryMockRecorder struct {
	mock *MockPGRepository
}

// NewMockPGRepository creates a new mock instance.
func NewMockPGRepository(ctrl *gomock.Controller) *MockPGRepository {
	mock := &MockPGRepository{ctrl: ctrl}
	mock.recorder = &MockPGRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPGRepository) EXPECT() *MockPGRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPGRepository) Create(ctx context.Context, giftCharge *models.GiftChargeCreateReq) (*models.GiftCharge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, giftCharge)
	ret0, _ := ret[0].(*models.GiftCharge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPGRepositoryMockRecorder) Create(ctx, giftCharge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPGRepository)(nil).Create), ctx, giftCharge)
}

// GetByCode mocks base method.
func (m *MockPGRepository) GetByCode(ctx context.Context, code string) (*models.GiftCharge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCode", ctx, code)
	ret0, _ := ret[0].(*models.GiftCharge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCode indicates an expected call of GetByCode.
func (mr *MockPGRepositoryMockRecorder) GetByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCode", reflect.TypeOf((*MockPGRepository)(nil).GetByCode), ctx, code)
}

// GetByCodeX mocks base method.
func (m *MockPGRepository) GetByCodeX(ctx context.Context, code string, tx v4.Tx) (*models.GiftCharge, v4.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCodeX", ctx, code, tx)
	ret0, _ := ret[0].(*models.GiftCharge)
	ret1, _ := ret[1].(v4.Tx)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByCodeX indicates an expected call of GetByCodeX.
func (mr *MockPGRepositoryMockRecorder) GetByCodeX(ctx, code, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCodeX", reflect.TypeOf((*MockPGRepository)(nil).GetByCodeX), ctx, code, tx)
}

// GetByID mocks base method.
func (m *MockPGRepository) GetByID(ctx context.Context, id int64) (*models.GiftCharge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.GiftCharge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPGRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPGRepository)(nil).GetByID), ctx, id)
}

// GetInValidList mocks base method.
func (m *MockPGRepository) GetInValidList(ctx context.Context) ([]*models.GiftCharge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInValidList", ctx)
	ret0, _ := ret[0].([]*models.GiftCharge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInValidList indicates an expected call of GetInValidList.
func (mr *MockPGRepositoryMockRecorder) GetInValidList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInValidList", reflect.TypeOf((*MockPGRepository)(nil).GetInValidList), ctx)
}

// GetList mocks base method.
func (m *MockPGRepository) GetList(ctx context.Context) ([]*models.GiftCharge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx)
	ret0, _ := ret[0].([]*models.GiftCharge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockPGRepositoryMockRecorder) GetList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockPGRepository)(nil).GetList), ctx)
}

// GetValidList mocks base method.
func (m *MockPGRepository) GetValidList(ctx context.Context) ([]*models.GiftCharge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidList", ctx)
	ret0, _ := ret[0].([]*models.GiftCharge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidList indicates an expected call of GetValidList.
func (mr *MockPGRepositoryMockRecorder) GetValidList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidList", reflect.TypeOf((*MockPGRepository)(nil).GetValidList), ctx)
}

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// DeleteGiftCharge mocks base method.
func (m *MockRedisRepository) DeleteGiftCharge(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGiftCharge", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGiftCharge indicates an expected call of DeleteGiftCharge.
func (mr *MockRedisRepositoryMockRecorder) DeleteGiftCharge(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGiftCharge", reflect.TypeOf((*MockRedisRepository)(nil).DeleteGiftCharge), ctx, id)
}

// GetGiftCharge mocks base method.
func (m *MockRedisRepository) GetGiftCharge(ctx context.Context, key string) (*models.GiftCharge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGiftCharge", ctx, key)
	ret0, _ := ret[0].(*models.GiftCharge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGiftCharge indicates an expected call of GetGiftCharge.
func (mr *MockRedisRepositoryMockRecorder) GetGiftCharge(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGiftCharge", reflect.TypeOf((*MockRedisRepository)(nil).GetGiftCharge), ctx, key)
}

// SetGiftCharge mocks base method.
func (m *MockRedisRepository) SetGiftCharge(ctx context.Context, giftCharge *models.GiftCharge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGiftCharge", ctx, giftCharge)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGiftCharge indicates an expected call of SetGiftCharge.
func (mr *MockRedisRepositoryMockRecorder) SetGiftCharge(ctx, giftCharge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGiftCharge", reflect.TypeOf((*MockRedisRepository)(nil).SetGiftCharge), ctx, giftCharge)
}
