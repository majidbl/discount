// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/discount/repository.go

// Package mock_discount is a generated GoMock package.
package mock_discount

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/majidbl/discount/internal/models"
)

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// DeleteDiscount mocks base method.
func (m *MockRedisRepository) DeleteDiscount(ctx context.Context, req *models.Discount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiscount", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDiscount indicates an expected call of DeleteDiscount.
func (mr *MockRedisRepositoryMockRecorder) DeleteDiscount(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscount", reflect.TypeOf((*MockRedisRepository)(nil).DeleteDiscount), ctx, req)
}

// DiscountExist mocks base method.
func (m *MockRedisRepository) DiscountExist(ctx context.Context, req *models.Discount) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscountExist", ctx, req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscountExist indicates an expected call of DiscountExist.
func (mr *MockRedisRepositoryMockRecorder) DiscountExist(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscountExist", reflect.TypeOf((*MockRedisRepository)(nil).DiscountExist), ctx, req)
}

// SetDiscount mocks base method.
func (m *MockRedisRepository) SetDiscount(ctx context.Context, req *models.Discount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDiscount", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDiscount indicates an expected call of SetDiscount.
func (mr *MockRedisRepositoryMockRecorder) SetDiscount(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDiscount", reflect.TypeOf((*MockRedisRepository)(nil).SetDiscount), ctx, req)
}
